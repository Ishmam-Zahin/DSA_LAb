#include<bits/stdc++.h>
#include"LinkList.h"
#include"Array.h"
#include"Stack.h"
#include"Queue.h"

using namespace std;

/*
11 11
1 3
1 2
2 4
3 7
4 5
5 6
6 8
6 9
7 10
3 5
1 11
*/
void bfs(int node, bool isvisited[], LinkList g[]){
    Queue q;
    q.xinsert(node);

    while(q.xgetsize()!=0){
        int newnode=q.xpop();
        isvisited[newnode]=true;
        cout<<newnode<<'\n';
        g[newnode].reposition();
        for(int i=0; i<g[newnode].getSize(); i++){
            int child=g[newnode].getNode();
            if(isvisited[child]) continue;
            q.xinsert(child);
            isvisited[child]=true;
        }
    }
}
int main(){
    int n, m;
    cin>>n>>m;
    LinkList g[n+1];
    bool isvisited[n+1];
    for(int i=1; i<=n; i++) isvisited[i]=false;
    for(int i=0; i<m; i++){
        int x, y;
        cin>>x>>y;
        g[x].add(y);
        g[y].add(x);
    }

    /*for(int i=1; i<=n; i++){
        g[i].reposition();
        for(int j=0; j<g[i].getSize(); j++){
            cout<<g[i].getNode()<<' ';
        }
        cout<<'\n';
    }*/
    bfs(1, isvisited, g);

}
